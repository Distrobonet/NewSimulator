"""autogenerated by genpy from NewSimulator/StateMessage.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import NewSimulator.msg

class StateMessage(genpy.Message):
  _md5sum = "c2f92f2d399ed0dfeffad13e5715400d"
  _type = "NewSimulator/StateMessage"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """FormationMessage formation
VectorMessage frp
RelationshipMessage[] relationships
VectorMessage linear_error
float64 angular_error
int32 timestep
int32 reference_id
float64 temperature
float64 heat
bool in_position
================================================================================
MSG: NewSimulator/FormationMessage
float64 radius
float64 heading
VectorMessage  seed_frp
int32   seed_id
int32   formation_id
================================================================================
MSG: NewSimulator/VectorMessage
float64 x
float64 y
================================================================================
MSG: NewSimulator/RelationshipMessage
VectorMessage desired
VectorMessage actual
int32 id
"""
  __slots__ = ['formation','frp','relationships','linear_error','angular_error','timestep','reference_id','temperature','heat','in_position']
  _slot_types = ['NewSimulator/FormationMessage','NewSimulator/VectorMessage','NewSimulator/RelationshipMessage[]','NewSimulator/VectorMessage','float64','int32','int32','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       formation,frp,relationships,linear_error,angular_error,timestep,reference_id,temperature,heat,in_position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StateMessage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.formation is None:
        self.formation = NewSimulator.msg.FormationMessage()
      if self.frp is None:
        self.frp = NewSimulator.msg.VectorMessage()
      if self.relationships is None:
        self.relationships = []
      if self.linear_error is None:
        self.linear_error = NewSimulator.msg.VectorMessage()
      if self.angular_error is None:
        self.angular_error = 0.
      if self.timestep is None:
        self.timestep = 0
      if self.reference_id is None:
        self.reference_id = 0
      if self.temperature is None:
        self.temperature = 0.
      if self.heat is None:
        self.heat = 0.
      if self.in_position is None:
        self.in_position = False
    else:
      self.formation = NewSimulator.msg.FormationMessage()
      self.frp = NewSimulator.msg.VectorMessage()
      self.relationships = []
      self.linear_error = NewSimulator.msg.VectorMessage()
      self.angular_error = 0.
      self.timestep = 0
      self.reference_id = 0
      self.temperature = 0.
      self.heat = 0.
      self.in_position = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4d2i2d.pack(_x.formation.radius, _x.formation.heading, _x.formation.seed_frp.x, _x.formation.seed_frp.y, _x.formation.seed_id, _x.formation.formation_id, _x.frp.x, _x.frp.y))
      length = len(self.relationships)
      buff.write(_struct_I.pack(length))
      for val1 in self.relationships:
        _v1 = val1.desired
        _x = _v1
        buff.write(_struct_2d.pack(_x.x, _x.y))
        _v2 = val1.actual
        _x = _v2
        buff.write(_struct_2d.pack(_x.x, _x.y))
        buff.write(_struct_i.pack(val1.id))
      _x = self
      buff.write(_struct_3d2i2dB.pack(_x.linear_error.x, _x.linear_error.y, _x.angular_error, _x.timestep, _x.reference_id, _x.temperature, _x.heat, _x.in_position))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.formation is None:
        self.formation = NewSimulator.msg.FormationMessage()
      if self.frp is None:
        self.frp = NewSimulator.msg.VectorMessage()
      if self.relationships is None:
        self.relationships = None
      if self.linear_error is None:
        self.linear_error = NewSimulator.msg.VectorMessage()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.formation.radius, _x.formation.heading, _x.formation.seed_frp.x, _x.formation.seed_frp.y, _x.formation.seed_id, _x.formation.formation_id, _x.frp.x, _x.frp.y,) = _struct_4d2i2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.relationships = []
      for i in range(0, length):
        val1 = NewSimulator.msg.RelationshipMessage()
        _v3 = val1.desired
        _x = _v3
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        _v4 = val1.actual
        _x = _v4
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        self.relationships.append(val1)
      _x = self
      start = end
      end += 49
      (_x.linear_error.x, _x.linear_error.y, _x.angular_error, _x.timestep, _x.reference_id, _x.temperature, _x.heat, _x.in_position,) = _struct_3d2i2dB.unpack(str[start:end])
      self.in_position = bool(self.in_position)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4d2i2d.pack(_x.formation.radius, _x.formation.heading, _x.formation.seed_frp.x, _x.formation.seed_frp.y, _x.formation.seed_id, _x.formation.formation_id, _x.frp.x, _x.frp.y))
      length = len(self.relationships)
      buff.write(_struct_I.pack(length))
      for val1 in self.relationships:
        _v5 = val1.desired
        _x = _v5
        buff.write(_struct_2d.pack(_x.x, _x.y))
        _v6 = val1.actual
        _x = _v6
        buff.write(_struct_2d.pack(_x.x, _x.y))
        buff.write(_struct_i.pack(val1.id))
      _x = self
      buff.write(_struct_3d2i2dB.pack(_x.linear_error.x, _x.linear_error.y, _x.angular_error, _x.timestep, _x.reference_id, _x.temperature, _x.heat, _x.in_position))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.formation is None:
        self.formation = NewSimulator.msg.FormationMessage()
      if self.frp is None:
        self.frp = NewSimulator.msg.VectorMessage()
      if self.relationships is None:
        self.relationships = None
      if self.linear_error is None:
        self.linear_error = NewSimulator.msg.VectorMessage()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.formation.radius, _x.formation.heading, _x.formation.seed_frp.x, _x.formation.seed_frp.y, _x.formation.seed_id, _x.formation.formation_id, _x.frp.x, _x.frp.y,) = _struct_4d2i2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.relationships = []
      for i in range(0, length):
        val1 = NewSimulator.msg.RelationshipMessage()
        _v7 = val1.desired
        _x = _v7
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        _v8 = val1.actual
        _x = _v8
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        self.relationships.append(val1)
      _x = self
      start = end
      end += 49
      (_x.linear_error.x, _x.linear_error.y, _x.angular_error, _x.timestep, _x.reference_id, _x.temperature, _x.heat, _x.in_position,) = _struct_3d2i2dB.unpack(str[start:end])
      self.in_position = bool(self.in_position)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_i = struct.Struct("<i")
_struct_3d2i2dB = struct.Struct("<3d2i2dB")
_struct_4d2i2d = struct.Struct("<4d2i2d")
