"""autogenerated by genpy from NewSimulator/FormationMessage.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import NewSimulator.msg

class FormationMessage(genpy.Message):
  _md5sum = "8954046ccbe1a10ea7eb252baf2abe9d"
  _type = "NewSimulator/FormationMessage"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 radius
float64 heading
VectorMessage  seed_frp
int32   seed_id
int32   formation_id
================================================================================
MSG: NewSimulator/VectorMessage
float64 x
float64 y
"""
  __slots__ = ['radius','heading','seed_frp','seed_id','formation_id']
  _slot_types = ['float64','float64','NewSimulator/VectorMessage','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       radius,heading,seed_frp,seed_id,formation_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FormationMessage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.radius is None:
        self.radius = 0.
      if self.heading is None:
        self.heading = 0.
      if self.seed_frp is None:
        self.seed_frp = NewSimulator.msg.VectorMessage()
      if self.seed_id is None:
        self.seed_id = 0
      if self.formation_id is None:
        self.formation_id = 0
    else:
      self.radius = 0.
      self.heading = 0.
      self.seed_frp = NewSimulator.msg.VectorMessage()
      self.seed_id = 0
      self.formation_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4d2i.pack(_x.radius, _x.heading, _x.seed_frp.x, _x.seed_frp.y, _x.seed_id, _x.formation_id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.seed_frp is None:
        self.seed_frp = NewSimulator.msg.VectorMessage()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.radius, _x.heading, _x.seed_frp.x, _x.seed_frp.y, _x.seed_id, _x.formation_id,) = _struct_4d2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4d2i.pack(_x.radius, _x.heading, _x.seed_frp.x, _x.seed_frp.y, _x.seed_id, _x.formation_id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.seed_frp is None:
        self.seed_frp = NewSimulator.msg.VectorMessage()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.radius, _x.heading, _x.seed_frp.x, _x.seed_frp.y, _x.seed_id, _x.formation_id,) = _struct_4d2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d2i = struct.Struct("<4d2i")
