"""autogenerated by genmsg_py from StateMessage.msg. Do not edit."""
import roslib.message
import struct


class StateMessage(roslib.message.Message):
  _md5sum = "199c3c439236ac8d1a99f8080aafbf52"
  _type = "Simulator/StateMessage"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#FormationMessage formation
#VectorMessage frp
#Relationship[] relationships
#VectorMessage linear_error
float64 angular_error
int32 timestep
int32 reference_id
float64 temperature
float64 heat
"""
  __slots__ = ['angular_error','timestep','reference_id','temperature','heat']
  _slot_types = ['float64','int32','int32','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       angular_error,timestep,reference_id,temperature,heat
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(StateMessage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.angular_error is None:
        self.angular_error = 0.
      if self.timestep is None:
        self.timestep = 0
      if self.reference_id is None:
        self.reference_id = 0
      if self.temperature is None:
        self.temperature = 0.
      if self.heat is None:
        self.heat = 0.
    else:
      self.angular_error = 0.
      self.timestep = 0
      self.reference_id = 0
      self.temperature = 0.
      self.heat = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_d2i2d.pack(_x.angular_error, _x.timestep, _x.reference_id, _x.temperature, _x.heat))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.angular_error, _x.timestep, _x.reference_id, _x.temperature, _x.heat,) = _struct_d2i2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_d2i2d.pack(_x.angular_error, _x.timestep, _x.reference_id, _x.temperature, _x.heat))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.angular_error, _x.timestep, _x.reference_id, _x.temperature, _x.heat,) = _struct_d2i2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_d2i2d = struct.Struct("<d2i2d")
