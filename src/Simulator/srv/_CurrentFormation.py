"""autogenerated by genmsg_py from CurrentFormationRequest.msg. Do not edit."""
import roslib.message
import struct


class CurrentFormationRequest(roslib.message.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "Simulator/CurrentFormationRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CurrentFormationRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
"""autogenerated by genmsg_py from CurrentFormationResponse.msg. Do not edit."""
import roslib.message
import struct

import Simulator.msg

class CurrentFormationResponse(roslib.message.Message):
  _md5sum = "1b8c322a6316abec4738c71c0df103d8"
  _type = "Simulator/CurrentFormationResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """FormationMessage formation

================================================================================
MSG: Simulator/FormationMessage
float64 radius
float64 heading
VectorMessage  seed_frp
int32   seed_id
int32   formation_id
================================================================================
MSG: Simulator/VectorMessage
float64 x
float64 y
"""
  __slots__ = ['formation']
  _slot_types = ['Simulator/FormationMessage']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       formation
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CurrentFormationResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.formation is None:
        self.formation = Simulator.msg.FormationMessage()
    else:
      self.formation = Simulator.msg.FormationMessage()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_4d2i.pack(_x.formation.radius, _x.formation.heading, _x.formation.seed_frp.x, _x.formation.seed_frp.y, _x.formation.seed_id, _x.formation.formation_id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.formation is None:
        self.formation = Simulator.msg.FormationMessage()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.formation.radius, _x.formation.heading, _x.formation.seed_frp.x, _x.formation.seed_frp.y, _x.formation.seed_id, _x.formation.formation_id,) = _struct_4d2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_4d2i.pack(_x.formation.radius, _x.formation.heading, _x.formation.seed_frp.x, _x.formation.seed_frp.y, _x.formation.seed_id, _x.formation.formation_id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.formation is None:
        self.formation = Simulator.msg.FormationMessage()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.formation.radius, _x.formation.heading, _x.formation.seed_frp.x, _x.formation.seed_frp.y, _x.formation.seed_id, _x.formation.formation_id,) = _struct_4d2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_4d2i = struct.Struct("<4d2i")
class CurrentFormation(roslib.message.ServiceDefinition):
  _type          = 'Simulator/CurrentFormation'
  _md5sum = '1b8c322a6316abec4738c71c0df103d8'
  _request_class  = CurrentFormationRequest
  _response_class = CurrentFormationResponse
