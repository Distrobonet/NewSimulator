"""autogenerated by genmsg_py from RelationshipRequest.msg. Do not edit."""
import roslib.message
import struct


class RelationshipRequest(roslib.message.Message):
  _md5sum = "200cb07d85016fe550656c3abd411199"
  _type = "Simulator/RelationshipRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 OriginID
int32 TargetID

"""
  __slots__ = ['OriginID','TargetID']
  _slot_types = ['int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       OriginID,TargetID
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(RelationshipRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.OriginID is None:
        self.OriginID = 0
      if self.TargetID is None:
        self.TargetID = 0
    else:
      self.OriginID = 0
      self.TargetID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.OriginID, _x.TargetID))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.OriginID, _x.TargetID,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.OriginID, _x.TargetID))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.OriginID, _x.TargetID,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2i = struct.Struct("<2i")
"""autogenerated by genmsg_py from RelationshipResponse.msg. Do not edit."""
import roslib.message
import struct

import Simulator.msg

class RelationshipResponse(roslib.message.Message):
  _md5sum = "c6a86f692159e25c26c19deba4b644d6"
  _type = "Simulator/RelationshipResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """RelationshipMessage theRelationship

================================================================================
MSG: Simulator/RelationshipMessage
VectorMessage desired
VectorMessage actual
int32 id
================================================================================
MSG: Simulator/VectorMessage
float64 x
float64 y
"""
  __slots__ = ['theRelationship']
  _slot_types = ['Simulator/RelationshipMessage']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       theRelationship
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(RelationshipResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.theRelationship is None:
        self.theRelationship = Simulator.msg.RelationshipMessage()
    else:
      self.theRelationship = Simulator.msg.RelationshipMessage()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_4di.pack(_x.theRelationship.desired.x, _x.theRelationship.desired.y, _x.theRelationship.actual.x, _x.theRelationship.actual.y, _x.theRelationship.id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.theRelationship is None:
        self.theRelationship = Simulator.msg.RelationshipMessage()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.theRelationship.desired.x, _x.theRelationship.desired.y, _x.theRelationship.actual.x, _x.theRelationship.actual.y, _x.theRelationship.id,) = _struct_4di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_4di.pack(_x.theRelationship.desired.x, _x.theRelationship.desired.y, _x.theRelationship.actual.x, _x.theRelationship.actual.y, _x.theRelationship.id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.theRelationship is None:
        self.theRelationship = Simulator.msg.RelationshipMessage()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.theRelationship.desired.x, _x.theRelationship.desired.y, _x.theRelationship.actual.x, _x.theRelationship.actual.y, _x.theRelationship.id,) = _struct_4di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_4di = struct.Struct("<4di")
class Relationship(roslib.message.ServiceDefinition):
  _type          = 'Simulator/Relationship'
  _md5sum = '2e48526e7615844c7bb3e20e828478bd'
  _request_class  = RelationshipRequest
  _response_class = RelationshipResponse
