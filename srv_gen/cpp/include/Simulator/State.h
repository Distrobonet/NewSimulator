/* Auto-generated by genmsg_cpp for file /home/student/workspace/Simulator/srv/State.srv */
#ifndef SIMULATOR_SERVICE_STATE_H
#define SIMULATOR_SERVICE_STATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "Simulator/StateMessage.h"

namespace Simulator
{
template <class ContainerAllocator>
struct StateRequest_ {
  typedef StateRequest_<ContainerAllocator> Type;

  StateRequest_()
  {
  }

  StateRequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "Simulator/StateRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "1f83d934d3a0ac3b6cca4ef9902343db"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::Simulator::StateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Simulator::StateRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StateRequest
typedef  ::Simulator::StateRequest_<std::allocator<void> > StateRequest;

typedef boost::shared_ptr< ::Simulator::StateRequest> StateRequestPtr;
typedef boost::shared_ptr< ::Simulator::StateRequest const> StateRequestConstPtr;


template <class ContainerAllocator>
struct StateResponse_ {
  typedef StateResponse_<ContainerAllocator> Type;

  StateResponse_()
  : state()
  {
  }

  StateResponse_(const ContainerAllocator& _alloc)
  : state(_alloc)
  {
  }

  typedef  ::Simulator::StateMessage_<ContainerAllocator>  _state_type;
   ::Simulator::StateMessage_<ContainerAllocator>  state;


private:
  static const char* __s_getDataType_() { return "Simulator/StateResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "1f83d934d3a0ac3b6cca4ef9902343db"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "1f83d934d3a0ac3b6cca4ef9902343db"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "StateMessage state\n\
\n\
\n\
================================================================================\n\
MSG: Simulator/StateMessage\n\
FormationMessage formation\n\
VectorMessage frp\n\
RelationshipMessage[] actual_relationships\n\
RelationshipMessage[] desired_relationships\n\
VectorMessage linear_error\n\
float64 angular_error\n\
int32 timestep\n\
int32 reference_id\n\
float64 temperature\n\
float64 heat\n\
================================================================================\n\
MSG: Simulator/FormationMessage\n\
float64 radius\n\
float64 heading\n\
VectorMessage  seed_frp\n\
int32   seed_id\n\
int32   formation_id\n\
================================================================================\n\
MSG: Simulator/VectorMessage\n\
float64 x\n\
float64 y\n\
================================================================================\n\
MSG: Simulator/RelationshipMessage\n\
VectorMessage desired\n\
VectorMessage actual\n\
int32 id\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, state);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, state);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(state);
    return size;
  }

  typedef boost::shared_ptr< ::Simulator::StateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Simulator::StateResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StateResponse
typedef  ::Simulator::StateResponse_<std::allocator<void> > StateResponse;

typedef boost::shared_ptr< ::Simulator::StateResponse> StateResponsePtr;
typedef boost::shared_ptr< ::Simulator::StateResponse const> StateResponseConstPtr;

struct State
{

typedef StateRequest Request;
typedef StateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct State
} // namespace Simulator

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Simulator::StateRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Simulator::StateRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Simulator::StateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::Simulator::StateRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::Simulator::StateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Simulator/StateRequest";
  }

  static const char* value(const  ::Simulator::StateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Simulator::StateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::Simulator::StateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Simulator::StateRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Simulator::StateResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Simulator::StateResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Simulator::StateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1f83d934d3a0ac3b6cca4ef9902343db";
  }

  static const char* value(const  ::Simulator::StateResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1f83d934d3a0ac3bULL;
  static const uint64_t static_value2 = 0x6cca4ef9902343dbULL;
};

template<class ContainerAllocator>
struct DataType< ::Simulator::StateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Simulator/StateResponse";
  }

  static const char* value(const  ::Simulator::StateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Simulator::StateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "StateMessage state\n\
\n\
\n\
================================================================================\n\
MSG: Simulator/StateMessage\n\
FormationMessage formation\n\
VectorMessage frp\n\
RelationshipMessage[] actual_relationships\n\
RelationshipMessage[] desired_relationships\n\
VectorMessage linear_error\n\
float64 angular_error\n\
int32 timestep\n\
int32 reference_id\n\
float64 temperature\n\
float64 heat\n\
================================================================================\n\
MSG: Simulator/FormationMessage\n\
float64 radius\n\
float64 heading\n\
VectorMessage  seed_frp\n\
int32   seed_id\n\
int32   formation_id\n\
================================================================================\n\
MSG: Simulator/VectorMessage\n\
float64 x\n\
float64 y\n\
================================================================================\n\
MSG: Simulator/RelationshipMessage\n\
VectorMessage desired\n\
VectorMessage actual\n\
int32 id\n\
";
  }

  static const char* value(const  ::Simulator::StateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Simulator::StateRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StateRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Simulator::StateResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StateResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<Simulator::State> {
  static const char* value() 
  {
    return "1f83d934d3a0ac3b6cca4ef9902343db";
  }

  static const char* value(const Simulator::State&) { return value(); } 
};

template<>
struct DataType<Simulator::State> {
  static const char* value() 
  {
    return "Simulator/State";
  }

  static const char* value(const Simulator::State&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Simulator::StateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1f83d934d3a0ac3b6cca4ef9902343db";
  }

  static const char* value(const Simulator::StateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Simulator::StateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Simulator/State";
  }

  static const char* value(const Simulator::StateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Simulator::StateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1f83d934d3a0ac3b6cca4ef9902343db";
  }

  static const char* value(const Simulator::StateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Simulator::StateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Simulator/State";
  }

  static const char* value(const Simulator::StateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SIMULATOR_SERVICE_STATE_H

