/* Auto-generated by genmsg_cpp for file /home/student/workspace/Simulator/srv/Relationship.srv */
#ifndef SIMULATOR_SERVICE_RELATIONSHIP_H
#define SIMULATOR_SERVICE_RELATIONSHIP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "Simulator/RelationshipMessage.h"

namespace Simulator
{
template <class ContainerAllocator>
struct RelationshipRequest_ {
  typedef RelationshipRequest_<ContainerAllocator> Type;

  RelationshipRequest_()
  : OriginID(0)
  , TargetID(0)
  {
  }

  RelationshipRequest_(const ContainerAllocator& _alloc)
  : OriginID(0)
  , TargetID(0)
  {
  }

  typedef int32_t _OriginID_type;
  int32_t OriginID;

  typedef int32_t _TargetID_type;
  int32_t TargetID;


private:
  static const char* __s_getDataType_() { return "Simulator/RelationshipRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "200cb07d85016fe550656c3abd411199"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "2e48526e7615844c7bb3e20e828478bd"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 OriginID\n\
int32 TargetID\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, OriginID);
    ros::serialization::serialize(stream, TargetID);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, OriginID);
    ros::serialization::deserialize(stream, TargetID);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(OriginID);
    size += ros::serialization::serializationLength(TargetID);
    return size;
  }

  typedef boost::shared_ptr< ::Simulator::RelationshipRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Simulator::RelationshipRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RelationshipRequest
typedef  ::Simulator::RelationshipRequest_<std::allocator<void> > RelationshipRequest;

typedef boost::shared_ptr< ::Simulator::RelationshipRequest> RelationshipRequestPtr;
typedef boost::shared_ptr< ::Simulator::RelationshipRequest const> RelationshipRequestConstPtr;


template <class ContainerAllocator>
struct RelationshipResponse_ {
  typedef RelationshipResponse_<ContainerAllocator> Type;

  RelationshipResponse_()
  : theRelationship()
  {
  }

  RelationshipResponse_(const ContainerAllocator& _alloc)
  : theRelationship(_alloc)
  {
  }

  typedef  ::Simulator::RelationshipMessage_<ContainerAllocator>  _theRelationship_type;
   ::Simulator::RelationshipMessage_<ContainerAllocator>  theRelationship;


private:
  static const char* __s_getDataType_() { return "Simulator/RelationshipResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "c6a86f692159e25c26c19deba4b644d6"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "2e48526e7615844c7bb3e20e828478bd"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "RelationshipMessage theRelationship\n\
\n\
================================================================================\n\
MSG: Simulator/RelationshipMessage\n\
VectorMessage desired\n\
VectorMessage actual\n\
int32 id\n\
================================================================================\n\
MSG: Simulator/VectorMessage\n\
float64 x\n\
float64 y\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, theRelationship);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, theRelationship);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(theRelationship);
    return size;
  }

  typedef boost::shared_ptr< ::Simulator::RelationshipResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Simulator::RelationshipResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RelationshipResponse
typedef  ::Simulator::RelationshipResponse_<std::allocator<void> > RelationshipResponse;

typedef boost::shared_ptr< ::Simulator::RelationshipResponse> RelationshipResponsePtr;
typedef boost::shared_ptr< ::Simulator::RelationshipResponse const> RelationshipResponseConstPtr;

struct Relationship
{

typedef RelationshipRequest Request;
typedef RelationshipResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Relationship
} // namespace Simulator

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Simulator::RelationshipRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Simulator::RelationshipRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Simulator::RelationshipRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "200cb07d85016fe550656c3abd411199";
  }

  static const char* value(const  ::Simulator::RelationshipRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x200cb07d85016fe5ULL;
  static const uint64_t static_value2 = 0x50656c3abd411199ULL;
};

template<class ContainerAllocator>
struct DataType< ::Simulator::RelationshipRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Simulator/RelationshipRequest";
  }

  static const char* value(const  ::Simulator::RelationshipRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Simulator::RelationshipRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 OriginID\n\
int32 TargetID\n\
\n\
";
  }

  static const char* value(const  ::Simulator::RelationshipRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Simulator::RelationshipRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Simulator::RelationshipResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Simulator::RelationshipResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Simulator::RelationshipResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c6a86f692159e25c26c19deba4b644d6";
  }

  static const char* value(const  ::Simulator::RelationshipResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc6a86f692159e25cULL;
  static const uint64_t static_value2 = 0x26c19deba4b644d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::Simulator::RelationshipResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Simulator/RelationshipResponse";
  }

  static const char* value(const  ::Simulator::RelationshipResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Simulator::RelationshipResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "RelationshipMessage theRelationship\n\
\n\
================================================================================\n\
MSG: Simulator/RelationshipMessage\n\
VectorMessage desired\n\
VectorMessage actual\n\
int32 id\n\
================================================================================\n\
MSG: Simulator/VectorMessage\n\
float64 x\n\
float64 y\n\
";
  }

  static const char* value(const  ::Simulator::RelationshipResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Simulator::RelationshipResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Simulator::RelationshipRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.OriginID);
    stream.next(m.TargetID);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RelationshipRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Simulator::RelationshipResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.theRelationship);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RelationshipResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<Simulator::Relationship> {
  static const char* value() 
  {
    return "2e48526e7615844c7bb3e20e828478bd";
  }

  static const char* value(const Simulator::Relationship&) { return value(); } 
};

template<>
struct DataType<Simulator::Relationship> {
  static const char* value() 
  {
    return "Simulator/Relationship";
  }

  static const char* value(const Simulator::Relationship&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Simulator::RelationshipRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2e48526e7615844c7bb3e20e828478bd";
  }

  static const char* value(const Simulator::RelationshipRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Simulator::RelationshipRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Simulator/Relationship";
  }

  static const char* value(const Simulator::RelationshipRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Simulator::RelationshipResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2e48526e7615844c7bb3e20e828478bd";
  }

  static const char* value(const Simulator::RelationshipResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Simulator::RelationshipResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Simulator/Relationship";
  }

  static const char* value(const Simulator::RelationshipResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SIMULATOR_SERVICE_RELATIONSHIP_H

